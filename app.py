import streamlit as st
from openai import OpenAI

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(
    base_url='http://localhost:1143/v1',
    api_key='llm'
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
model_mapping = {
    "–ö–æ–¥: Qwen-Coder": "lmstudio-community/Qwen2.5-Coder-7B-Instruct-GGUF/Qwen2.5-Coder-7B-Instruct-Q4_K_M.gguf",
    "–¢–µ–∫—Å—Ç: Vikhr-Qwen-ru": "lmstudio-community/Qwen2.5-Coder-7B-Instruct-GGUF/Qwen2.5-Coder-7B-Instruct-Q4_K_M.gguf",
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: Qwen-Math": "lmstudio-community/Qwen2.5-Coder-7B-Instruct-GGUF/Qwen2.5-Coder-7B-Instruct-Q4_K_M.gguf"
}


def generate_text(prompt, model, max_tokens=200, temperature=0.7, style=None, is_code=False):
    if is_code:
        # –ß—ë—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∫–æ–¥–∞
        prompt = f"–ù–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ –∫–æ–¥. –ù–∏–∫–∞–∫–∏—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:\n{prompt}"
    elif style:
        # –ï—Å–ª–∏ —Å—Ç–∏–ª—å —É–∫–∞–∑–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ –ø—Ä–æ–º—Ç—É
        prompt = f"–ù–∞–ø–∏—à–∏ {style}:\n{prompt}"

    response = client.completions.create(
        model=model,
        prompt=prompt,
        max_tokens=max_tokens,
        temperature=temperature,
        top_p=0.95
    )
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
    return response.choices[0].text.strip()


st.set_page_config(page_title="ThinkForge", page_icon="üßä", layout="wide")

st.markdown("""
    <style>
    .big-font {
        font-size: 24px !important;
    }
    .stButton>button {
        width: 100%;
    }
    </style>
    """, unsafe_allow_html=True)

st.title("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ê—Ç–æ–º–∞")

col1, col2 = st.columns([2, 1])

with col1:
    st.markdown('<p class="big-font">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:</p>', unsafe_allow_html=True)
    tema = st.selectbox("", options=["–ö–æ–¥: Qwen-Coder", "–¢–µ–∫—Å—Ç: Vikhr-Qwen-ru", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: Qwen-Math"], index=0)

    if tema != "–ö–æ–¥: Qwen-Coder":
        st.markdown('<p class="big-font">–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞:</p>', unsafe_allow_html=True)
        style = st.text_input("",
                              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Å—Ç–∞—Ç—å—è, –ø—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –ø–∏—Å—å–º–æ, –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞, –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞")
    else:
        style = None

    st.markdown('<p class="big-font">–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç (–ø—Ä–æ–º—Ç):</p>', unsafe_allow_html=True)
    prompt = st.text_area("", value="", height=200)

with col2:
    with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", expanded=True):
        max_tokens = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤:", min_value=50, max_value=2000, value=1800, step=50)
        temperature = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å):", min_value=0.0, max_value=1.0, value=0.7, step=0.1)

if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"):
    if not prompt:
        st.error("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!")
    else:
        selected_model = model_mapping.get(tema, None)
        if not selected_model:
            st.error(f"–ú–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–º—ã '{tema}' –Ω–µ –∑–∞–¥–∞–Ω–∞!")
        else:
            try:
                with st.spinner('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞...'):
                    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "–ö–æ–¥: Qwen-Coder", –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∫–æ–¥–∞
                    is_code = tema == "–ö–æ–¥: Qwen-Coder"
                    generated_text = generate_text(prompt, model=selected_model, max_tokens=max_tokens,
                                                   temperature=temperature, style=style, is_code=is_code)
                st.success("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
                st.markdown("### –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
                st.text_area("", value=generated_text, height=300)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
